{"version":3,"sources":["webpack:///path---docs-en-test-615906993f20becbb59e.js","webpack:///./.cache/json/docs-en-test.json"],"names":["webpackJsonp","865","module","exports","data","currentPage","html","frontmatter","title","description","commit","fields","slug","chapter","framework","language","site","siteMetadata","toc","languages","githubUrl","codeGithubUrl","siteUrl","pages","edges","node","tocTitle","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,KAAA,6gPAAypOC,aAAscC,MAAA,UAAAC,YAAA,uCAAAC,OAAA,WAA0FC,QAAWC,KAAA,iBAAAC,QAAA,OAAAC,UAAA,OAAAC,SAAA,OAA6EC,MAASC,cAAgBT,MAAA,kBAAAU,KAAA,kHAAAC,WAAA,WAAAC,UAAA,iDAAAC,cAAA,kDAAAC,QAAA,uBAA0UC,OAAUC,QAAUC,MAAQlB,aAAemB,SAAA,sBAAAlB,MAAA,iCAAAC,YAAA,4DAAmJE,QAAWC,KAAA,gCAAAC,QAAA,0BAA2EY,MAAQlB,aAAemB,SAAA,KAAAlB,MAAA,aAAAC,YAAA,uEAAyHE,QAAWC,KAAA,uBAAAC,QAAA,iBAAyDY,MAAQlB,aAAemB,SAAA,KAAAlB,MAAA,aAAAC,YAAA,uCAAyFE,QAAWC,KAAA,uBAAAC,QAAA,iBAAyDY,MAAQlB,aAAemB,SAAA,OAAAlB,MAAA,eAAAC,YAAA,kDAAwGE,QAAWC,KAAA,iBAAAC,QAAA,WAA6CY,MAAQlB,aAAemB,SAAA,SAAAlB,MAAA,mBAAAC,YAAA,mDAA+GE,QAAWC,KAAA,mBAAAC,QAAA,aAAiDY,MAAQlB,aAAemB,SAAA,cAAAlB,MAAA,cAAAC,YAAA,yDAAqHE,QAAWC,KAAA,wBAAAC,QAAA,kBAA2DY,MAAQlB,aAAemB,SAAA,UAAAlB,MAAA,qBAAAC,YAAA,wCAAuGE,QAAWC,KAAA,mBAAAC,QAAA,aAAiDY,MAAQlB,aAAemB,SAAA,mBAAAlB,MAAA,2BAAAC,YAAA,yCAAuHE,QAAWC,KAAA,6BAAAC,QAAA,uBAAqEY,MAAQlB,aAAemB,SAAA,KAAAlB,MAAA,UAAAC,YAAA,wCAAuFE,QAAWC,KAAA,iBAAAC,QAAA,aAA8Cc,aAAgBf,KAAA,iBAAAE,UAAA,OAAAC,SAAA,KAAAF,QAAA","file":"path---docs-en-test-615906993f20becbb59e.js","sourcesContent":["webpackJsonp([138770789664299],{\n\n/***/ 865:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"currentPage\":{\"html\":\"<h1>Test UI components</h1>\\n<p>No Storybook tutorial would be complete without testing. Testing is essential to creating high quality UIs. In modular systems, miniscule tweaks can result in major regressions. So far we encountered three types of tests:</p>\\n<ul>\\n<li><strong>Visual tests</strong> rely on developers to manually look at a component to verify it for correctness. They help us sanity check a component’s appearance as we build.</li>\\n<li><strong>Snapshot tests</strong> with Storyshots capture a component’s rendered markup. They help us stay abreast of markup changes that cause rendering errors and warnings.</li>\\n<li><strong>Unit tests</strong> with Jest verify that the output of a component remains the same given an fixed input. They’re great for testing the functional qualities of a component.</li>\\n</ul>\\n<h2>“But does it look right?”</h2>\\n<p>Unfortunately, the aforementioned testing methods alone aren’t enough to prevent UI bugs. UIs are tricky to test because design is subjective and nuanced. Visual tests are too manual, snapshot tests trigger too many false positives when used for UI, and pixel-level unit tests are poor value. A complete Storybook testing strategy also includes visual regression tests.</p>\\n<h2>Visual regression testing for Storybook</h2>\\n<p>Visual regression tests are designed to catch changes in appearance. They work by capturing screenshots of every story and comparing them commit-to-commit to surface changes. This is perfect for verifying graphical elements like layout, color, size, and contrast.</p>\\n<video autoPlay muted playsInline loop style=\\\"width:480px; margin: 0 auto;\\\">\\n  <source\\n    src=\\\"/visual-regression-testing.mp4\\\"\\n    type=\\\"video/mp4\\\"\\n  />\\n</video>\\n<p>Storybook is a fantastic tool for visual regression testing because every story is essentially a test specification. Each time we write or update a story we get a spec for free!</p>\\n<p>There are a number of tools for visual regression testing. For professional teams we recommend <a href=\\\"https://www.chromaticqa.com/\\\"><strong>Chromatic</strong></a>, an addon made by Storybook maintainers that runs tests in the cloud.</p>\\n<h2>Setup visual regression testing</h2>\\n<p>Chromatic is a hassle-free Storybook addon for visual regression testing and review in the cloud. Since it’s a paid service (with a free trial), it may not be for everyone. However, Chromatic is an instructive example of a production visual testing workflow that we'll try out for free. Let’s have a look.</p>\\n<h3>Initiate Git</h3>\\n<p>First you want to setup Git for your project in the local directory. Chromatic uses Git history to keep track of your UI components.</p>\\n<pre><code class=\\\"language-bash\\\">$ git init\\n</code></pre>\\n<p>Next add files to the first commit.</p>\\n<pre><code class=\\\"language-bash\\\">$ git add .\\n</code></pre>\\n<p>Now commit the files.</p>\\n<pre><code class=\\\"language-bash\\\">$ git commit -m \\\"taskbox UI\\\"\\n</code></pre>\\n<h3>Get Chromatic</h3>\\n<p>Add the package as a dependency.</p>\\n<pre><code class=\\\"language-bash\\\">yarn add storybook-chromatic\\n</code></pre>\\n<p>Import Chromatic in your <code>.storybook/config.js</code> file.</p>\\n<pre><code class=\\\"language-javascript\\\">import { configure } from '@storybook/react';\\nimport 'storybook-chromatic/storybook-addon';\\n\\nimport '../src/index.css';\\n\\nconst req = require.context('../src/components', true, /\\\\.stories\\\\.js$/);\\n\\nfunction loadStories() {\\n  req.keys().forEach(filename => req(filename));\\n}\\n\\nconfigure(loadStories, module);\\n</code></pre>\\n<p>Then <a href=\\\"https://chromaticqa.com/start\\\">login to Chromatic</a> with your GitHub account (Chromatic only asks for lightweight permissions). Create a project with name \\\"taskbox\\\" and copy your unique <code>app-code</code>.</p>\\n<video autoPlay muted playsInline loop style=\\\"width:520px; margin: 0 auto;\\\">\\n  <source\\n    src=\\\"/chromatic-setup-learnstorybook.mp4\\\"\\n    type=\\\"video/mp4\\\"\\n  />\\n</video>\\n<p>Run the test command in the command line to setup visual regression tests for Storybook. Don't forget to add your unique app code in place of <code>&#x3C;app-code></code>.</p>\\n<pre><code class=\\\"language-bash\\\">./node_modules/.bin/chromatic test --storybook-addon --app-code=&#x3C;app-code> --do-not-start\\n</code></pre>\\n<div class=\\\"aside\\\">\\n<code>--do-not-start</code> is an option that tells Chromatic not to start Storybook. Use this if you already have Storybook running. If not omit <code>--do-not-start</code>.\\n</div>\\n<p>Once the first test is complete, we have test baselines for each story. In other words, screenshots of each story known to be “good”. Future changes to those stories will be compared to the baselines.</p>\\n<p><img src=\\\"/chromatic-baselines.png\\\" alt=\\\"Chromatic baselines\\\"></p>\\n<h2>Catch a UI change</h2>\\n<p>Visual regression testing relies on comparing images of the new rendered UI code to the baseline images. If a UI change is caught you get notified. See how it works by tweaking the background of the <code>Task</code> component:</p>\\n<p><img src=\\\"/chromatic-change-to-task-component.png\\\" alt=\\\"code change\\\"></p>\\n<p>This yields a new background color for the item.</p>\\n<p><img src=\\\"/chromatic-task-change.png\\\" alt=\\\"task background change\\\"></p>\\n<p>Use the test command from earlier to run another Chromatic test.</p>\\n<pre><code class=\\\"language-bash\\\">./node_modules/.bin/chromatic test --storybook-addon --app-code=&#x3C;app-code> --do-not-start\\n</code></pre>\\n<p>Follow the link to the web UI where you’ll see changes.</p>\\n<p><img src=\\\"/chromatic-catch-changes.png\\\" alt=\\\"UI changes in Chromatic\\\"></p>\\n<p>There are a lot of changes! The component hierarchy where <code>Task</code> is a child of <code>TaskList</code> and <code>Inbox</code> means one small tweak snowballs into major regressions. This circumstance is precisely why developers need visual regression testing in addition to other testing methods.</p>\\n<p><img src=\\\"/minor-major-regressions.gif\\\" alt=\\\"UI minor tweaks major regressions\\\"></p>\\n<h2>Review changes</h2>\\n<p>Visual regression testing ensures components dont change by accident. But it’s still up to you to determine whether changes are intentional or not.</p>\\n<p>If a change is intentional you need to update the baseline so that future tests are compared to the latest version of the story. If a change is unintentional it needs to be fixed.</p>\\n<video autoPlay muted playsInline loop style=\\\"width:480px; margin: 0 auto;\\\">\\n  <source\\n    src=\\\"/website-workflow-review-merge-optimized.mp4\\\"\\n    type=\\\"video/mp4\\\"\\n  />\\n</video>\\n<p>Since modern apps are constructed from components, it’s important that we test at the level of component. Doing so helps us pinpoint the root cause of a change, the component, instead of reacting to symptoms of a change, the screens and composite components.</p>\\n<h2>Merge changes</h2>\\n<p>When we’ve finished reviewing we’re ready to merge UI changes with confidence --knowing that updates won’t accidentally introduce bugs. If you like the new <code>papayawhip</code> background then accept the changes, if not revert to the previous state.</p>\\n<p><img src=\\\"/chromatic-review-finished.png\\\" alt=\\\"Changes ready to be merged\\\"></p>\\n<p>Storybook helps you <strong>build</strong> components; testing helps you <strong>maintain</strong> them. The four types of UI testing are covered in this tutorial are visual, snapshot, unit, and visual regression testing. You can automate the last three by adding them to your CI script. This helps you ship components without worrying about stowaway bugs. The whole workflow is illustrated below.</p>\\n<p><img src=\\\"/cdd-review-workflow.png\\\" alt=\\\"Visual regression testing workflow\\\"></p>\",\"frontmatter\":{\"title\":\"Testing\",\"description\":\"Learn the ways to test UI components\",\"commit\":\"342bce5\"},\"fields\":{\"slug\":\"/docs/en/test/\",\"chapter\":\"test\",\"framework\":\"docs\",\"language\":\"en\"}},\"site\":{\"siteMetadata\":{\"title\":\"binstd-区块链云服务平台\",\"toc\":[\"get-started\",\"simple-component\",\"composite-component\",\"data\",\"screen\",\"test\",\"deploy\",\"conclusion\",\"contribute\"],\"languages\":[\"en\",\"zh\"],\"githubUrl\":\"https://github.com/hichroma/learnstorybook.com\",\"codeGithubUrl\":\"https://github.com/hichroma/learnstorybook-code\",\"siteUrl\":\"https://binstd.com\"}},\"pages\":{\"edges\":[{\"node\":{\"frontmatter\":{\"tocTitle\":\"Composite component\",\"title\":\"Assemble a composite component\",\"description\":\"Assemble a composite component out of simpler components\"},\"fields\":{\"slug\":\"/docs/en/composite-component/\",\"chapter\":\"composite-component\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Conclusion\",\"description\":\"Put all your knowledge together and learn more Storybook techniques\"},\"fields\":{\"slug\":\"/docs/en/conclusion/\",\"chapter\":\"conclusion\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Contribute\",\"description\":\"Help share Storybook with the world\"},\"fields\":{\"slug\":\"/docs/en/contribute/\",\"chapter\":\"contribute\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Data\",\"title\":\"Wire in data\",\"description\":\"Learn how to wire in data to your UI component\"},\"fields\":{\"slug\":\"/docs/en/data/\",\"chapter\":\"data\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Deploy\",\"title\":\"Deploy Storybook\",\"description\":\"Deploy Storybook online with GitHub and Netlify\"},\"fields\":{\"slug\":\"/docs/en/deploy/\",\"chapter\":\"deploy\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Get started\",\"title\":\"Get started\",\"description\":\"Setup React Storybook in your development environment\"},\"fields\":{\"slug\":\"/docs/en/get-started/\",\"chapter\":\"get-started\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Screens\",\"title\":\"Construct a screen\",\"description\":\"Construct a screen out of components\"},\"fields\":{\"slug\":\"/docs/en/screen/\",\"chapter\":\"screen\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Simple component\",\"title\":\"Build a simple component\",\"description\":\"Build a simple component in isolation\"},\"fields\":{\"slug\":\"/docs/en/simple-component/\",\"chapter\":\"simple-component\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Testing\",\"description\":\"Learn the ways to test UI components\"},\"fields\":{\"slug\":\"/docs/en/test/\",\"chapter\":\"test\"}}}]}},\"pathContext\":{\"slug\":\"/docs/en/test/\",\"framework\":\"docs\",\"language\":\"en\",\"chapter\":\"test\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-en-test-615906993f20becbb59e.js","module.exports = {\"data\":{\"currentPage\":{\"html\":\"<h1>Test UI components</h1>\\n<p>No Storybook tutorial would be complete without testing. Testing is essential to creating high quality UIs. In modular systems, miniscule tweaks can result in major regressions. So far we encountered three types of tests:</p>\\n<ul>\\n<li><strong>Visual tests</strong> rely on developers to manually look at a component to verify it for correctness. They help us sanity check a component’s appearance as we build.</li>\\n<li><strong>Snapshot tests</strong> with Storyshots capture a component’s rendered markup. They help us stay abreast of markup changes that cause rendering errors and warnings.</li>\\n<li><strong>Unit tests</strong> with Jest verify that the output of a component remains the same given an fixed input. They’re great for testing the functional qualities of a component.</li>\\n</ul>\\n<h2>“But does it look right?”</h2>\\n<p>Unfortunately, the aforementioned testing methods alone aren’t enough to prevent UI bugs. UIs are tricky to test because design is subjective and nuanced. Visual tests are too manual, snapshot tests trigger too many false positives when used for UI, and pixel-level unit tests are poor value. A complete Storybook testing strategy also includes visual regression tests.</p>\\n<h2>Visual regression testing for Storybook</h2>\\n<p>Visual regression tests are designed to catch changes in appearance. They work by capturing screenshots of every story and comparing them commit-to-commit to surface changes. This is perfect for verifying graphical elements like layout, color, size, and contrast.</p>\\n<video autoPlay muted playsInline loop style=\\\"width:480px; margin: 0 auto;\\\">\\n  <source\\n    src=\\\"/visual-regression-testing.mp4\\\"\\n    type=\\\"video/mp4\\\"\\n  />\\n</video>\\n<p>Storybook is a fantastic tool for visual regression testing because every story is essentially a test specification. Each time we write or update a story we get a spec for free!</p>\\n<p>There are a number of tools for visual regression testing. For professional teams we recommend <a href=\\\"https://www.chromaticqa.com/\\\"><strong>Chromatic</strong></a>, an addon made by Storybook maintainers that runs tests in the cloud.</p>\\n<h2>Setup visual regression testing</h2>\\n<p>Chromatic is a hassle-free Storybook addon for visual regression testing and review in the cloud. Since it’s a paid service (with a free trial), it may not be for everyone. However, Chromatic is an instructive example of a production visual testing workflow that we'll try out for free. Let’s have a look.</p>\\n<h3>Initiate Git</h3>\\n<p>First you want to setup Git for your project in the local directory. Chromatic uses Git history to keep track of your UI components.</p>\\n<pre><code class=\\\"language-bash\\\">$ git init\\n</code></pre>\\n<p>Next add files to the first commit.</p>\\n<pre><code class=\\\"language-bash\\\">$ git add .\\n</code></pre>\\n<p>Now commit the files.</p>\\n<pre><code class=\\\"language-bash\\\">$ git commit -m \\\"taskbox UI\\\"\\n</code></pre>\\n<h3>Get Chromatic</h3>\\n<p>Add the package as a dependency.</p>\\n<pre><code class=\\\"language-bash\\\">yarn add storybook-chromatic\\n</code></pre>\\n<p>Import Chromatic in your <code>.storybook/config.js</code> file.</p>\\n<pre><code class=\\\"language-javascript\\\">import { configure } from '@storybook/react';\\nimport 'storybook-chromatic/storybook-addon';\\n\\nimport '../src/index.css';\\n\\nconst req = require.context('../src/components', true, /\\\\.stories\\\\.js$/);\\n\\nfunction loadStories() {\\n  req.keys().forEach(filename => req(filename));\\n}\\n\\nconfigure(loadStories, module);\\n</code></pre>\\n<p>Then <a href=\\\"https://chromaticqa.com/start\\\">login to Chromatic</a> with your GitHub account (Chromatic only asks for lightweight permissions). Create a project with name \\\"taskbox\\\" and copy your unique <code>app-code</code>.</p>\\n<video autoPlay muted playsInline loop style=\\\"width:520px; margin: 0 auto;\\\">\\n  <source\\n    src=\\\"/chromatic-setup-learnstorybook.mp4\\\"\\n    type=\\\"video/mp4\\\"\\n  />\\n</video>\\n<p>Run the test command in the command line to setup visual regression tests for Storybook. Don't forget to add your unique app code in place of <code>&#x3C;app-code></code>.</p>\\n<pre><code class=\\\"language-bash\\\">./node_modules/.bin/chromatic test --storybook-addon --app-code=&#x3C;app-code> --do-not-start\\n</code></pre>\\n<div class=\\\"aside\\\">\\n<code>--do-not-start</code> is an option that tells Chromatic not to start Storybook. Use this if you already have Storybook running. If not omit <code>--do-not-start</code>.\\n</div>\\n<p>Once the first test is complete, we have test baselines for each story. In other words, screenshots of each story known to be “good”. Future changes to those stories will be compared to the baselines.</p>\\n<p><img src=\\\"/chromatic-baselines.png\\\" alt=\\\"Chromatic baselines\\\"></p>\\n<h2>Catch a UI change</h2>\\n<p>Visual regression testing relies on comparing images of the new rendered UI code to the baseline images. If a UI change is caught you get notified. See how it works by tweaking the background of the <code>Task</code> component:</p>\\n<p><img src=\\\"/chromatic-change-to-task-component.png\\\" alt=\\\"code change\\\"></p>\\n<p>This yields a new background color for the item.</p>\\n<p><img src=\\\"/chromatic-task-change.png\\\" alt=\\\"task background change\\\"></p>\\n<p>Use the test command from earlier to run another Chromatic test.</p>\\n<pre><code class=\\\"language-bash\\\">./node_modules/.bin/chromatic test --storybook-addon --app-code=&#x3C;app-code> --do-not-start\\n</code></pre>\\n<p>Follow the link to the web UI where you’ll see changes.</p>\\n<p><img src=\\\"/chromatic-catch-changes.png\\\" alt=\\\"UI changes in Chromatic\\\"></p>\\n<p>There are a lot of changes! The component hierarchy where <code>Task</code> is a child of <code>TaskList</code> and <code>Inbox</code> means one small tweak snowballs into major regressions. This circumstance is precisely why developers need visual regression testing in addition to other testing methods.</p>\\n<p><img src=\\\"/minor-major-regressions.gif\\\" alt=\\\"UI minor tweaks major regressions\\\"></p>\\n<h2>Review changes</h2>\\n<p>Visual regression testing ensures components dont change by accident. But it’s still up to you to determine whether changes are intentional or not.</p>\\n<p>If a change is intentional you need to update the baseline so that future tests are compared to the latest version of the story. If a change is unintentional it needs to be fixed.</p>\\n<video autoPlay muted playsInline loop style=\\\"width:480px; margin: 0 auto;\\\">\\n  <source\\n    src=\\\"/website-workflow-review-merge-optimized.mp4\\\"\\n    type=\\\"video/mp4\\\"\\n  />\\n</video>\\n<p>Since modern apps are constructed from components, it’s important that we test at the level of component. Doing so helps us pinpoint the root cause of a change, the component, instead of reacting to symptoms of a change, the screens and composite components.</p>\\n<h2>Merge changes</h2>\\n<p>When we’ve finished reviewing we’re ready to merge UI changes with confidence --knowing that updates won’t accidentally introduce bugs. If you like the new <code>papayawhip</code> background then accept the changes, if not revert to the previous state.</p>\\n<p><img src=\\\"/chromatic-review-finished.png\\\" alt=\\\"Changes ready to be merged\\\"></p>\\n<p>Storybook helps you <strong>build</strong> components; testing helps you <strong>maintain</strong> them. The four types of UI testing are covered in this tutorial are visual, snapshot, unit, and visual regression testing. You can automate the last three by adding them to your CI script. This helps you ship components without worrying about stowaway bugs. The whole workflow is illustrated below.</p>\\n<p><img src=\\\"/cdd-review-workflow.png\\\" alt=\\\"Visual regression testing workflow\\\"></p>\",\"frontmatter\":{\"title\":\"Testing\",\"description\":\"Learn the ways to test UI components\",\"commit\":\"342bce5\"},\"fields\":{\"slug\":\"/docs/en/test/\",\"chapter\":\"test\",\"framework\":\"docs\",\"language\":\"en\"}},\"site\":{\"siteMetadata\":{\"title\":\"binstd-区块链云服务平台\",\"toc\":[\"get-started\",\"simple-component\",\"composite-component\",\"data\",\"screen\",\"test\",\"deploy\",\"conclusion\",\"contribute\"],\"languages\":[\"en\",\"zh\"],\"githubUrl\":\"https://github.com/hichroma/learnstorybook.com\",\"codeGithubUrl\":\"https://github.com/hichroma/learnstorybook-code\",\"siteUrl\":\"https://binstd.com\"}},\"pages\":{\"edges\":[{\"node\":{\"frontmatter\":{\"tocTitle\":\"Composite component\",\"title\":\"Assemble a composite component\",\"description\":\"Assemble a composite component out of simpler components\"},\"fields\":{\"slug\":\"/docs/en/composite-component/\",\"chapter\":\"composite-component\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Conclusion\",\"description\":\"Put all your knowledge together and learn more Storybook techniques\"},\"fields\":{\"slug\":\"/docs/en/conclusion/\",\"chapter\":\"conclusion\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Contribute\",\"description\":\"Help share Storybook with the world\"},\"fields\":{\"slug\":\"/docs/en/contribute/\",\"chapter\":\"contribute\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Data\",\"title\":\"Wire in data\",\"description\":\"Learn how to wire in data to your UI component\"},\"fields\":{\"slug\":\"/docs/en/data/\",\"chapter\":\"data\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Deploy\",\"title\":\"Deploy Storybook\",\"description\":\"Deploy Storybook online with GitHub and Netlify\"},\"fields\":{\"slug\":\"/docs/en/deploy/\",\"chapter\":\"deploy\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Get started\",\"title\":\"Get started\",\"description\":\"Setup React Storybook in your development environment\"},\"fields\":{\"slug\":\"/docs/en/get-started/\",\"chapter\":\"get-started\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Screens\",\"title\":\"Construct a screen\",\"description\":\"Construct a screen out of components\"},\"fields\":{\"slug\":\"/docs/en/screen/\",\"chapter\":\"screen\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Simple component\",\"title\":\"Build a simple component\",\"description\":\"Build a simple component in isolation\"},\"fields\":{\"slug\":\"/docs/en/simple-component/\",\"chapter\":\"simple-component\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Testing\",\"description\":\"Learn the ways to test UI components\"},\"fields\":{\"slug\":\"/docs/en/test/\",\"chapter\":\"test\"}}}]}},\"pathContext\":{\"slug\":\"/docs/en/test/\",\"framework\":\"docs\",\"language\":\"en\",\"chapter\":\"test\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-en-test.json\n// module id = 865\n// module chunks = 138770789664299"],"sourceRoot":""}