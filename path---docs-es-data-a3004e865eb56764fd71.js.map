{"version":3,"sources":["webpack:///path---docs-es-data-a3004e865eb56764fd71.js","webpack:///./.cache/json/docs-es-data.json"],"names":["webpackJsonp","869","module","exports","data","currentPage","html","frontmatter","title","description","commit","fields","slug","chapter","framework","language","site","siteMetadata","toc","languages","githubUrl","codeGithubUrl","siteUrl","pages","edges","node","tocTitle","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,aAAeC,KAAA,iwMAAgnMC,aAAuKC,MAAA,mBAAAC,YAAA,qDAAAC,OAAA,WAAiHC,QAAWC,KAAA,iBAAAC,QAAA,OAAAC,UAAA,OAAAC,SAAA,OAA6EC,MAASC,cAAgBT,MAAA,kBAAAU,KAAA,kHAAAC,WAAA,WAAAC,UAAA,iDAAAC,cAAA,kDAAAC,QAAA,uBAA0UC,OAAUC,QAAUC,MAAQlB,aAAemB,SAAA,uBAAAlB,MAAA,oCAAAC,YAAA,qEAAgKE,QAAWC,KAAA,gCAAAC,QAAA,0BAA2EY,MAAQlB,aAAemB,SAAA,KAAAlB,MAAA,aAAAC,YAAA,sEAAwHE,QAAWC,KAAA,uBAAAC,QAAA,iBAAyDY,MAAQlB,aAAemB,SAAA,KAAAlB,MAAA,aAAAC,YAAA,4CAA8FE,QAAWC,KAAA,uBAAAC,QAAA,iBAAyDY,MAAQlB,aAAemB,SAAA,QAAAlB,MAAA,mBAAAC,YAAA,sDAAiHE,QAAWC,KAAA,iBAAAC,QAAA,WAA6CY,MAAQlB,aAAemB,SAAA,YAAAlB,MAAA,sBAAAC,YAAA,mDAAqHE,QAAWC,KAAA,mBAAAC,QAAA,aAAiDY,MAAQlB,aAAemB,SAAA,YAAAlB,MAAA,YAAAC,YAAA,0DAAkHE,QAAWC,KAAA,wBAAAC,QAAA,kBAA2DY,MAAQlB,aAAemB,SAAA,YAAAlB,MAAA,yBAAAC,YAAA,0CAA+GE,QAAWC,KAAA,mBAAAC,QAAA,aAAiDY,MAAQlB,aAAemB,SAAA,oBAAAlB,MAAA,iCAAAC,YAAA,iDAAsIE,QAAWC,KAAA,6BAAAC,QAAA,uBAAqEY,MAAQlB,aAAemB,SAAA,KAAAlB,MAAA,UAAAC,YAAA,+DAA8GE,QAAWC,KAAA,iBAAAC,QAAA,aAA8Cc,aAAgBf,KAAA,iBAAAE,UAAA,OAAAC,SAAA,KAAAF,QAAA","file":"path---docs-es-data-a3004e865eb56764fd71.js","sourcesContent":["webpackJsonp([22388057074618],{\n\n/***/ 869:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"currentPage\":{\"html\":\"<h1>Introducir datos</h1>\\n<p>Hasta ahora hemos creado componentes aislados sin estado, muy útiles para Storybook, pero finalmente no son útiles hasta que les proporcionemos algunos datos en nuestra aplicación.</p>\\n<p>Este tutorial no se centra en los detalles de la construcción de una aplicación, por lo que no profundizaremos en esos detalles aquí. Pero, nos tomaremos un momento para observar un patrón común para introducir datos con componentes contenedores.</p>\\n<h2>Componentes contenedores</h2>\\n<p>Nuestro componente <code>TaskList</code> como lo hemos escrito es de “presentación” (ver <a href=\\\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\\\">artículo al respecto</a>), en el sentido que no se comunica con nada externo a su implementación. Para poder pasarle datos, necesitaremos un \\\"contenedor\\\".</p>\\n<p>Este ejemplo utiliza <a href=\\\"https://redux.js.org/\\\">Redux</a>, la librería mas popular de React para almacenar datos, que básicamente nos permite crear un modelo simple de datos para la aplicación. De todos modos, el patrón que utilizaremos también se aplica a otras librerías de manejo de datos como <a href=\\\"https://www.apollographql.com/client/\\\">Apollo</a> y <a href=\\\"https://mobx.js.org/\\\">MobX</a>.</p>\\n<p>Primero construiremos un simple store Redux que responde a acciones que cambian el estado de una tarea, en un archivo llamado <code>lib/redux.js</code>, (intencionalmente lo mantendremos simple):</p>\\n<pre><code class=\\\"language-javascript\\\">// Una implementación simple de los store/actions/reducer de Redux.\\n// Una verdadera aplicación sería más compleja y se dividiría en diferentes archivos.\\nimport { createStore } from 'redux';\\n\\n// Las acciones son los \\\"nombres\\\" de los cambios que pueden ocurrir en el store.\\nexport const actions = {\\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\\n  PIN_TASK: 'PIN_TASK',\\n};\\n\\n// Los creadores de acciones son la forma en que se agrupan las acciones con los datos necesarios para ejecutarlas.\\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\\n\\n// Todos nuestros reducers simplemente cambian el estado de una sola tarea.\\nfunction taskStateReducer(taskState) {\\n  return (state, action) => {\\n    return {\\n      ...state,\\n      tasks: state.tasks.map(\\n        task => (task.id === action.id ? { ...task, state: taskState } : task)\\n      ),\\n    };\\n  };\\n}\\n\\n// El reducer describe como los contenidos del store cambian por cada acción.\\nexport const reducer = (state, action) => {\\n  switch (action.type) {\\n    case actions.ARCHIVE_TASK:\\n      return taskStateReducer('TASK_ARCHIVED')(state, action);\\n    case actions.PIN_TASK:\\n      return taskStateReducer('TASK_PINNED')(state, action);\\n    default:\\n      return state;\\n  }\\n};\\n\\n// El estado inicial de nuestro store cuando la app carga.\\n// Usualmente obtendrías esto de un servidor.\\nconst defaultTasks = [\\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\\n];\\n\\n// Exportamos el store de redux construido.\\nexport default createStore(reducer, { tasks: defaultTasks });\\n</code></pre>\\n<p>Luego actualizaremos lo exportado por defecto en el componente <code>TaskList</code> para conectarlo al Store de Redux y renderizar las tareas en las que estamos interesados.</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport Task from './Task';\\nimport { connect } from 'react-redux';\\nimport { archiveTask, pinTask, snoozeTask } from '../lib/redux';\\n\\nexport function PureTaskList({ tasks, onPinTask, onArchiveTask }) {\\n  /* antigua implementación de TaskList */\\n}\\n\\nPureTaskList.propTypes = {\\n  loading: PropTypes.bool,\\n  tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\\n  onPinTask: PropTypes.func.isRequired,\\n  onArchiveTask: PropTypes.func.isRequired,\\n};\\n\\nPureTaskList.defaultProps = {\\n  loading: false,\\n};\\n\\nexport default connect(\\n  ({ tasks }) => ({\\n    tasks: tasks.filter(t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'),\\n  }),\\n  dispatch => ({\\n    onArchiveTask: id => dispatch(archiveTask(id)),\\n    onPinTask: id => dispatch(pinTask(id)),\\n  })\\n)(PureTaskList);\\n</code></pre>\\n<p>En esta etapa, nuestras pruebas de Storybook habrán dejado de funcionar, ya que la <code>TaskList</code> ahora es un contenedor y ya no espera ninguna de las props pasadas como parámetros, sino que se conecta a la store y establece las props en el componente <code>PureTaskList</code> que envuelve.</p>\\n<p>Sin embargo, podemos resolver este problema fácilmente renderizando <code>PureTaskList</code> --el componente de presentación-- en nuestras historias de Storybook:</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react';\\nimport { storiesOf } from '@storybook/react';\\n\\nimport { PureTaskList } from './TaskList';\\nimport { createTask, actions } from './Task.stories';\\n\\nexport const defaultTasks = [\\n  createTask({ state: 'TASK_INBOX' }),\\n  createTask({ state: 'TASK_INBOX' }),\\n  createTask({ state: 'TASK_INBOX' }),\\n  createTask({ state: 'TASK_INBOX' }),\\n  createTask({ state: 'TASK_INBOX' }),\\n  createTask({ state: 'TASK_INBOX' }),\\n];\\n\\nexport const withPinnedTasks = [\\n  createTask({ title: 'Task 1', state: 'TASK_INBOX' }),\\n  createTask({ title: 'Task 2', state: 'TASK_INBOX' }),\\n  createTask({ title: 'Task 3', state: 'TASK_INBOX' }),\\n  createTask({ title: 'Task 4', state: 'TASK_INBOX' }),\\n  createTask({ title: 'Task 5', state: 'TASK_INBOX' }),\\n  createTask({ title: 'Task 6 (pinned)', state: 'TASK_PINNED' }),\\n];\\n\\nstoriesOf('TaskList', module)\\n  .addDecorator(story => &#x3C;div style={{ padding: '3rem' }}>{story()}&#x3C;/div>)\\n  .add('default', () => &#x3C;PureTaskList tasks={defaultTasks} {...actions} />)\\n  .add('withPinnedTasks', () => &#x3C;PureTaskList tasks={withPinnedTasks} {...actions} />)\\n  .add('loading', () => &#x3C;PureTaskList loading tasks={[]} {...actions} />)\\n  .add('empty', () => &#x3C;PureTaskList tasks={[]} {...actions} />);\\n</code></pre>\\n<video autoPlay muted playsInline loop>\\n  <source\\n    src=\\\"/finished-tasklist-states.mp4\\\"\\n    type=\\\"video/mp4\\\"\\n  />\\n</video>\",\"frontmatter\":{\"title\":\"Introducir datos\",\"description\":\"Aprende como introducir datos a tus componentes UI\",\"commit\":\"ea58e96\"},\"fields\":{\"slug\":\"/docs/es/data/\",\"chapter\":\"data\",\"framework\":\"docs\",\"language\":\"es\"}},\"site\":{\"siteMetadata\":{\"title\":\"binstd-区块链云服务平台\",\"toc\":[\"get-started\",\"simple-component\",\"composite-component\",\"data\",\"screen\",\"test\",\"deploy\",\"conclusion\",\"contribute\"],\"languages\":[\"en\",\"zh\"],\"githubUrl\":\"https://github.com/hichroma/learnstorybook.com\",\"codeGithubUrl\":\"https://github.com/hichroma/learnstorybook-code\",\"siteUrl\":\"https://binstd.com\"}},\"pages\":{\"edges\":[{\"node\":{\"frontmatter\":{\"tocTitle\":\"Componente Compuesto\",\"title\":\"Ensamblar un componente compuesto\",\"description\":\"Ensamblar un componente compuesto a partir de componentes simples\"},\"fields\":{\"slug\":\"/docs/es/composite-component/\",\"chapter\":\"composite-component\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Conclusion\",\"description\":\"Pon todo tu conocimiento junto y aprende más técnicas de Storybook\"},\"fields\":{\"slug\":\"/docs/es/conclusion/\",\"chapter\":\"conclusion\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Contribuir\",\"description\":\"Ayuda a compartir Storybook con el mundo\"},\"fields\":{\"slug\":\"/docs/es/contribute/\",\"chapter\":\"contribute\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Datos\",\"title\":\"Introducir datos\",\"description\":\"Aprende como introducir datos a tus componentes UI\"},\"fields\":{\"slug\":\"/docs/es/data/\",\"chapter\":\"data\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Desplegar\",\"title\":\"Desplegar Storybook\",\"description\":\"Desplegar Storybook online con GitHub y Netlify\"},\"fields\":{\"slug\":\"/docs/es/deploy/\",\"chapter\":\"deploy\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Empezando\",\"title\":\"Empezando\",\"description\":\"Configurar React Storybook en tu entorno de desarrollo\"},\"fields\":{\"slug\":\"/docs/es/get-started/\",\"chapter\":\"get-started\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Pantallas\",\"title\":\"Construir una pantalla\",\"description\":\"Construir una pantalla con componentes\"},\"fields\":{\"slug\":\"/docs/es/screen/\",\"chapter\":\"screen\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Componente Simple\",\"title\":\"Construye un componente simple\",\"description\":\"Construye un componente simple en aislamiento\"},\"fields\":{\"slug\":\"/docs/es/simple-component/\",\"chapter\":\"simple-component\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Testing\",\"description\":\"Aprende las formas de hacer test a los componentes de la UI\"},\"fields\":{\"slug\":\"/docs/es/test/\",\"chapter\":\"test\"}}}]}},\"pathContext\":{\"slug\":\"/docs/es/data/\",\"framework\":\"docs\",\"language\":\"es\",\"chapter\":\"data\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-es-data-a3004e865eb56764fd71.js","module.exports = {\"data\":{\"currentPage\":{\"html\":\"<h1>Introducir datos</h1>\\n<p>Hasta ahora hemos creado componentes aislados sin estado, muy útiles para Storybook, pero finalmente no son útiles hasta que les proporcionemos algunos datos en nuestra aplicación.</p>\\n<p>Este tutorial no se centra en los detalles de la construcción de una aplicación, por lo que no profundizaremos en esos detalles aquí. Pero, nos tomaremos un momento para observar un patrón común para introducir datos con componentes contenedores.</p>\\n<h2>Componentes contenedores</h2>\\n<p>Nuestro componente <code>TaskList</code> como lo hemos escrito es de “presentación” (ver <a href=\\\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\\\">artículo al respecto</a>), en el sentido que no se comunica con nada externo a su implementación. Para poder pasarle datos, necesitaremos un \\\"contenedor\\\".</p>\\n<p>Este ejemplo utiliza <a href=\\\"https://redux.js.org/\\\">Redux</a>, la librería mas popular de React para almacenar datos, que básicamente nos permite crear un modelo simple de datos para la aplicación. De todos modos, el patrón que utilizaremos también se aplica a otras librerías de manejo de datos como <a href=\\\"https://www.apollographql.com/client/\\\">Apollo</a> y <a href=\\\"https://mobx.js.org/\\\">MobX</a>.</p>\\n<p>Primero construiremos un simple store Redux que responde a acciones que cambian el estado de una tarea, en un archivo llamado <code>lib/redux.js</code>, (intencionalmente lo mantendremos simple):</p>\\n<pre><code class=\\\"language-javascript\\\">// Una implementación simple de los store/actions/reducer de Redux.\\n// Una verdadera aplicación sería más compleja y se dividiría en diferentes archivos.\\nimport { createStore } from 'redux';\\n\\n// Las acciones son los \\\"nombres\\\" de los cambios que pueden ocurrir en el store.\\nexport const actions = {\\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\\n  PIN_TASK: 'PIN_TASK',\\n};\\n\\n// Los creadores de acciones son la forma en que se agrupan las acciones con los datos necesarios para ejecutarlas.\\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\\n\\n// Todos nuestros reducers simplemente cambian el estado de una sola tarea.\\nfunction taskStateReducer(taskState) {\\n  return (state, action) => {\\n    return {\\n      ...state,\\n      tasks: state.tasks.map(\\n        task => (task.id === action.id ? { ...task, state: taskState } : task)\\n      ),\\n    };\\n  };\\n}\\n\\n// El reducer describe como los contenidos del store cambian por cada acción.\\nexport const reducer = (state, action) => {\\n  switch (action.type) {\\n    case actions.ARCHIVE_TASK:\\n      return taskStateReducer('TASK_ARCHIVED')(state, action);\\n    case actions.PIN_TASK:\\n      return taskStateReducer('TASK_PINNED')(state, action);\\n    default:\\n      return state;\\n  }\\n};\\n\\n// El estado inicial de nuestro store cuando la app carga.\\n// Usualmente obtendrías esto de un servidor.\\nconst defaultTasks = [\\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\\n];\\n\\n// Exportamos el store de redux construido.\\nexport default createStore(reducer, { tasks: defaultTasks });\\n</code></pre>\\n<p>Luego actualizaremos lo exportado por defecto en el componente <code>TaskList</code> para conectarlo al Store de Redux y renderizar las tareas en las que estamos interesados.</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport Task from './Task';\\nimport { connect } from 'react-redux';\\nimport { archiveTask, pinTask, snoozeTask } from '../lib/redux';\\n\\nexport function PureTaskList({ tasks, onPinTask, onArchiveTask }) {\\n  /* antigua implementación de TaskList */\\n}\\n\\nPureTaskList.propTypes = {\\n  loading: PropTypes.bool,\\n  tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\\n  onPinTask: PropTypes.func.isRequired,\\n  onArchiveTask: PropTypes.func.isRequired,\\n};\\n\\nPureTaskList.defaultProps = {\\n  loading: false,\\n};\\n\\nexport default connect(\\n  ({ tasks }) => ({\\n    tasks: tasks.filter(t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'),\\n  }),\\n  dispatch => ({\\n    onArchiveTask: id => dispatch(archiveTask(id)),\\n    onPinTask: id => dispatch(pinTask(id)),\\n  })\\n)(PureTaskList);\\n</code></pre>\\n<p>En esta etapa, nuestras pruebas de Storybook habrán dejado de funcionar, ya que la <code>TaskList</code> ahora es un contenedor y ya no espera ninguna de las props pasadas como parámetros, sino que se conecta a la store y establece las props en el componente <code>PureTaskList</code> que envuelve.</p>\\n<p>Sin embargo, podemos resolver este problema fácilmente renderizando <code>PureTaskList</code> --el componente de presentación-- en nuestras historias de Storybook:</p>\\n<pre><code class=\\\"language-javascript\\\">import React from 'react';\\nimport { storiesOf } from '@storybook/react';\\n\\nimport { PureTaskList } from './TaskList';\\nimport { createTask, actions } from './Task.stories';\\n\\nexport const defaultTasks = [\\n  createTask({ state: 'TASK_INBOX' }),\\n  createTask({ state: 'TASK_INBOX' }),\\n  createTask({ state: 'TASK_INBOX' }),\\n  createTask({ state: 'TASK_INBOX' }),\\n  createTask({ state: 'TASK_INBOX' }),\\n  createTask({ state: 'TASK_INBOX' }),\\n];\\n\\nexport const withPinnedTasks = [\\n  createTask({ title: 'Task 1', state: 'TASK_INBOX' }),\\n  createTask({ title: 'Task 2', state: 'TASK_INBOX' }),\\n  createTask({ title: 'Task 3', state: 'TASK_INBOX' }),\\n  createTask({ title: 'Task 4', state: 'TASK_INBOX' }),\\n  createTask({ title: 'Task 5', state: 'TASK_INBOX' }),\\n  createTask({ title: 'Task 6 (pinned)', state: 'TASK_PINNED' }),\\n];\\n\\nstoriesOf('TaskList', module)\\n  .addDecorator(story => &#x3C;div style={{ padding: '3rem' }}>{story()}&#x3C;/div>)\\n  .add('default', () => &#x3C;PureTaskList tasks={defaultTasks} {...actions} />)\\n  .add('withPinnedTasks', () => &#x3C;PureTaskList tasks={withPinnedTasks} {...actions} />)\\n  .add('loading', () => &#x3C;PureTaskList loading tasks={[]} {...actions} />)\\n  .add('empty', () => &#x3C;PureTaskList tasks={[]} {...actions} />);\\n</code></pre>\\n<video autoPlay muted playsInline loop>\\n  <source\\n    src=\\\"/finished-tasklist-states.mp4\\\"\\n    type=\\\"video/mp4\\\"\\n  />\\n</video>\",\"frontmatter\":{\"title\":\"Introducir datos\",\"description\":\"Aprende como introducir datos a tus componentes UI\",\"commit\":\"ea58e96\"},\"fields\":{\"slug\":\"/docs/es/data/\",\"chapter\":\"data\",\"framework\":\"docs\",\"language\":\"es\"}},\"site\":{\"siteMetadata\":{\"title\":\"binstd-区块链云服务平台\",\"toc\":[\"get-started\",\"simple-component\",\"composite-component\",\"data\",\"screen\",\"test\",\"deploy\",\"conclusion\",\"contribute\"],\"languages\":[\"en\",\"zh\"],\"githubUrl\":\"https://github.com/hichroma/learnstorybook.com\",\"codeGithubUrl\":\"https://github.com/hichroma/learnstorybook-code\",\"siteUrl\":\"https://binstd.com\"}},\"pages\":{\"edges\":[{\"node\":{\"frontmatter\":{\"tocTitle\":\"Componente Compuesto\",\"title\":\"Ensamblar un componente compuesto\",\"description\":\"Ensamblar un componente compuesto a partir de componentes simples\"},\"fields\":{\"slug\":\"/docs/es/composite-component/\",\"chapter\":\"composite-component\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Conclusion\",\"description\":\"Pon todo tu conocimiento junto y aprende más técnicas de Storybook\"},\"fields\":{\"slug\":\"/docs/es/conclusion/\",\"chapter\":\"conclusion\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Contribuir\",\"description\":\"Ayuda a compartir Storybook con el mundo\"},\"fields\":{\"slug\":\"/docs/es/contribute/\",\"chapter\":\"contribute\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Datos\",\"title\":\"Introducir datos\",\"description\":\"Aprende como introducir datos a tus componentes UI\"},\"fields\":{\"slug\":\"/docs/es/data/\",\"chapter\":\"data\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Desplegar\",\"title\":\"Desplegar Storybook\",\"description\":\"Desplegar Storybook online con GitHub y Netlify\"},\"fields\":{\"slug\":\"/docs/es/deploy/\",\"chapter\":\"deploy\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Empezando\",\"title\":\"Empezando\",\"description\":\"Configurar React Storybook en tu entorno de desarrollo\"},\"fields\":{\"slug\":\"/docs/es/get-started/\",\"chapter\":\"get-started\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Pantallas\",\"title\":\"Construir una pantalla\",\"description\":\"Construir una pantalla con componentes\"},\"fields\":{\"slug\":\"/docs/es/screen/\",\"chapter\":\"screen\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":\"Componente Simple\",\"title\":\"Construye un componente simple\",\"description\":\"Construye un componente simple en aislamiento\"},\"fields\":{\"slug\":\"/docs/es/simple-component/\",\"chapter\":\"simple-component\"}}},{\"node\":{\"frontmatter\":{\"tocTitle\":null,\"title\":\"Testing\",\"description\":\"Aprende las formas de hacer test a los componentes de la UI\"},\"fields\":{\"slug\":\"/docs/es/test/\",\"chapter\":\"test\"}}}]}},\"pathContext\":{\"slug\":\"/docs/es/data/\",\"framework\":\"docs\",\"language\":\"es\",\"chapter\":\"data\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-es-data.json\n// module id = 869\n// module chunks = 22388057074618"],"sourceRoot":""}